name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: Build frontend
        run: cd frontend && npm run build
      
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt
      
      - name: Package backend
        run: |
          cd backend
          # Create a distribution package
          pip install wheel
          python setup.py bdist_wheel
      
      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist
          retention-days: 1

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      
      - name: Run frontend tests
        run: cd frontend && npm test
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt
      
      - name: Run backend tests
        run: cd backend && python -m pytest

  deploy-staging:
    if: github.event.inputs.environment == 'staging'
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Download backend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist
      
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ github.event.inputs.version }} to staging environment"
          # In a real-world scenario, you would add actual deployment steps here
          # For example:
          # - Upload frontend files to a static hosting service
          # - Deploy backend to a cloud provider
          # - Update environment variables
          # - Run database migrations

  deploy-production:
    if: github.event.inputs.environment == 'production'
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Download backend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/dist
      
      - name: Deploy to production
        run: |
          echo "Deploying version ${{ github.event.inputs.version }} to production environment"
          # In a real-world scenario, you would add actual deployment steps here
          # For example:
          # - Upload frontend files to a CDN
          # - Deploy backend to a production server
          # - Update environment variables
          # - Run database migrations with safety checks
      
      - name: Create release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
